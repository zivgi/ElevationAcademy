<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1255">
<meta name=Generator content="Microsoft Word 14 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Cambria;
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:Consolas;
	panose-1:2 11 6 9 2 2 4 3 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:13.0pt;
	font-family:"Arial","sans-serif";
	color:#222222;
	background:white;}
h1
	{mso-style-link:"Heading 1 Char";
	margin-top:24.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Cambria","serif";
	color:#365F91;
	background:white;}
h2
	{mso-style-link:"Heading 2 Char";
	margin-top:10.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:13.0pt;
	font-family:"Cambria","serif";
	color:#4F81BD;
	background:white;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{mso-style-link:"Title Char";
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:28.0pt;
	font-family:"Cambria","serif";
	color:#222222;
	letter-spacing:-.5pt;
	background:white;}
p.MsoTitleCxSpFirst, li.MsoTitleCxSpFirst, div.MsoTitleCxSpFirst
	{mso-style-link:"Title Char";
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:28.0pt;
	font-family:"Cambria","serif";
	color:#222222;
	letter-spacing:-.5pt;
	background:white;}
p.MsoTitleCxSpMiddle, li.MsoTitleCxSpMiddle, div.MsoTitleCxSpMiddle
	{mso-style-link:"Title Char";
	margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:28.0pt;
	font-family:"Cambria","serif";
	color:#222222;
	letter-spacing:-.5pt;
	background:white;}
p.MsoTitleCxSpLast, li.MsoTitleCxSpLast, div.MsoTitleCxSpLast
	{mso-style-link:"Title Char";
	margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:28.0pt;
	font-family:"Cambria","serif";
	color:#222222;
	letter-spacing:-.5pt;
	background:white;}
p.MsoSubtitle, li.MsoSubtitle, div.MsoSubtitle
	{mso-style-link:"Subtitle Char";
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Cambria","serif";
	color:#4F81BD;
	letter-spacing:.75pt;
	background:white;
	font-style:italic;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p.MsoAcetate, li.MsoAcetate, div.MsoAcetate
	{mso-style-link:"Balloon Text Char";
	margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:8.0pt;
	font-family:"Tahoma","sans-serif";
	color:#222222;
	background:white;}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:13.0pt;
	font-family:"Arial","sans-serif";
	color:#222222;
	background:white;}
p.MsoListParagraphCxSpFirst, li.MsoListParagraphCxSpFirst, div.MsoListParagraphCxSpFirst
	{margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:13.0pt;
	font-family:"Arial","sans-serif";
	color:#222222;
	background:white;}
p.MsoListParagraphCxSpMiddle, li.MsoListParagraphCxSpMiddle, div.MsoListParagraphCxSpMiddle
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:13.0pt;
	font-family:"Arial","sans-serif";
	color:#222222;
	background:white;}
p.MsoListParagraphCxSpLast, li.MsoListParagraphCxSpLast, div.MsoListParagraphCxSpLast
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:13.0pt;
	font-family:"Arial","sans-serif";
	color:#222222;
	background:white;}
span.MsoBookTitle
	{font-variant:small-caps;
	letter-spacing:.25pt;
	font-weight:bold;}
span.Heading1Char
	{mso-style-name:"Heading 1 Char";
	mso-style-link:"Heading 1";
	font-family:"Cambria","serif";
	color:#365F91;
	font-weight:bold;}
p.JSCode, li.JSCode, div.JSCode
	{mso-style-name:JSCode;
	mso-style-link:"JSCode Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:.2in;
	line-height:105%;
	background:black;
	border:none;
	padding:0in;
	font-size:13.0pt;
	font-family:"Calibri","sans-serif";
	color:#DEEAF6;}
span.JSCodeChar
	{mso-style-name:"JSCode Char";
	mso-style-link:JSCode;
	font-family:"Calibri","sans-serif";
	color:#DEEAF6;
	background:black;}
p.JSfromVS, li.JSfromVS, div.JSfromVS
	{mso-style-name:JSfromVS;
	mso-style-link:"JSfromVS Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:0in;
	background:#EEECE1;
	text-autospace:none;
	border:none;
	padding:0in;
	font-size:13.0pt;
	font-family:Consolas;}
span.JSfromVSChar
	{mso-style-name:"JSfromVS Char";
	mso-style-link:JSfromVS;
	font-family:Consolas;
	background:#EEECE1;}
span.BalloonTextChar
	{mso-style-name:"Balloon Text Char";
	mso-style-link:"Balloon Text";
	font-family:"Tahoma","sans-serif";
	color:#222222;}
p.exercise, li.exercise, div.exercise
	{mso-style-name:exercise;
	mso-style-link:"exercise Char";
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:"Cambria","serif";
	color:#4F81BD;
	letter-spacing:.75pt;
	background:white;
	font-style:italic;}
span.exerciseChar
	{mso-style-name:"exercise Char";
	mso-style-link:exercise;
	font-family:"Cambria","serif";
	color:#4F81BD;
	letter-spacing:.75pt;
	font-style:italic;}
span.keyword
	{mso-style-name:keyword;}
span.SubtitleChar
	{mso-style-name:"Subtitle Char";
	mso-style-link:Subtitle;
	font-family:"Cambria","serif";
	color:#4F81BD;
	letter-spacing:.75pt;
	font-style:italic;}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-link:"Heading 2";
	font-family:"Cambria","serif";
	color:#4F81BD;
	font-weight:bold;}
span.TitleChar
	{mso-style-name:"Title Char";
	mso-style-link:Title;
	font-family:"Cambria","serif";
	color:#222222;
	letter-spacing:-.5pt;}
.MsoChpDefault
	{font-family:"Calibri","sans-serif";}
.MsoPapDefault
	{margin-bottom:10.0pt;
	line-height:115%;}
@page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>

</head>

<body lang=EN-US link=blue vlink=purple>

<div class=WordSection1>

<h2>07/04/2016</h2>

<p class=MsoTitle>Fullstack JS Project  – Ziv Gilad</p>

<p class=MsoNormal>&nbsp;</p>

<h1>Intro</h1>

<p class=MsoNormal><span style='font-size:10.5pt;line-height:107%;color:#4D4D4D;
background:#EDEFF0'>&nbsp;</span></p>

<p class=MsoNormal>This lesson is about a guided project on building a full
stack client-server web application. In project is mostly based on your previous
knowledge with few new things.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>By fullstack we mean developing both the client and the
server, combining several of the technologies learned.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The server side pieces consist of:</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>Node.js as the backend server,</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>Express.js as the web server framework, </p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>MongoDB as our database,</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>Mongoose as our bridge between Node and MongoDB.</p>

<p class=MsoNormal>&nbsp;</p>

<h1>Background</h1>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>In this project we’ll build a client server college system
and we’ll implement everything related to students. However we won’t be
implementing any other entities such as classes and professors.</p>

<p class=MsoNormal>Our server is Node.js and our client is just your favorite
browser.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The web server we build is what is known as a RESTfull API server.</p>

<p class=MsoNormal>What do we mean by RESTfull?</p>

<p class=MsoNormal>REST stands for representation state transfer, </p>

<p class=MsoNormal>REST is just a series of rules for our web server, so
everyone that uses our service can easily understand how it works.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The client sends requests and the server sends back replies.</p>

<p class=MsoNormal>This is straight forward, and it’s exactly how the real web
works!</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>We will be accessing the server’s student resources and
therefore our main url will be http://localhost/students.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Another piece of a uniform interface is the HTTP verbs
(methods).</p>

<p class=MsoNormal>We’ve already learned about the GET method, but there are
others.</p>

<p class=MsoNormal>In a RESTfull service the HTTP verbs determine the type of
action that we want to perform on the resource:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Http GET just gets the data (a list of objects or a specific
object, one student or a list of students, for example)</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>POST is used to add data, so post to <a
href="http://localhost/student">http://localhost/student</a><span
class=MsoHyperlink>s</span> should add a new student.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>DELETE removes a student from the list.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>PUT updates an existing student.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note: there’s also a PATCH verb for updating just a piece of
the resource, which we won’t be using in this project.</p>

<p class=MsoNormal>&nbsp;</p>

<h1>Stateless server</h1>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>As the number of clients increase, we may want to add new
server machines to support the load.</p>

<p class=MsoNormal>Therefore we do not want to store any client state in a
particular server’s memory (because this memory is private to the server and
cannot be shared with the other server machines).</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>At the best, the client will send in his request everything
that the server needs for processing this request.</p>

<p class=MsoNormal>The server will reply with a response that is based only on
this request.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<h1>Let’s get started</h1>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Let’s begin with installing everything we need for our
environment:</p>

<p class=MsoNormal>Refer to previous lessons on how to install node and MongoDB,
then use NPM to install express, and Mongoose</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Create a folder for your project named ‘FullstackProject’,
then open a command prompt and navigate to this folder and type</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid white 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:black;margin-left:.2in;margin-right:0in'>

<p class=JSCode style='margin-left:0in;background:black'>Npm init</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>As you learned in the NPM lesson, this creates the file package.json
for us so we can later save the list of all packages that we’re going to use in
the list of dependencies.</p>

<p class=MsoNormal>Just accept all defaults and make sure the package.json is
created.</p>

<p class=MsoNormal> </p>

<p class=MsoNormal>Let’s install express with the save option for updating the
dependencies section of the package.json file (verify it after running the
command):</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid white 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:black;margin-left:.2in;margin-right:0in'>

<p class=JSCode style='margin-left:0in;background:black'>npm install express –save</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>When we deploy our package, we wouldn’t need to send the
express package with it. The clients can just type npm install and NPM will
take care of all dependencies.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Now create a file named main.js and add the code to require
express:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid white 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:black;margin-left:.2in;margin-right:0in'>

<p class=JSCode style='margin-left:0in;background:black'>var express =
require('express');</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Add the code to create the express application and start a
web server:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid white 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:black;margin-left:.2in;margin-right:0in'>

<p class=JSCode style='margin-left:0in;background:black'>var app = express();</p>

<p class=JSCode style='margin-left:0in;background:black'>app.listen(1337);</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Let’s add a route to the root of our site:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid white 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:black;margin-left:.2in;margin-right:0in'>

<p class=JSCode style='margin-left:0in;background:black'>app.get('/', function
(req, res) {</p>

<p class=JSCode style='margin-left:0in;background:black'>       res.send(&quot;You
are inside the fullstack project&quot;)</p>

<p class=JSCode style='margin-left:0in;background:black'>});</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Verify that you see the message in your browser:</p>

<p class=MsoNormal><img border=0 width=240 height=96 id="Picture 5"
src="Fullstack%20JS%20Project_files/image001.png"> </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>OK then, finished setting up express and manage to run this
framework on our node server</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Let’s now move on to implement the http GET verb which will
retrieve our data to the client (either one item or a list of items).</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Let’s create a new route for getting a list of our students:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid white 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:black;margin-left:.2in;margin-right:0in'>

<p class=JSCode style='margin-left:0in;background:black'>app.get('/Students',
function (req, res) {</p>

<p class=JSCode style='margin-left:0in;background:black'>       res.send({
students : [{ name: &quot;David&quot;, grade: 85 }, { name: &quot;Moshe&quot;,
grade: 90 }] });</p>

<p class=JSCode style='margin-left:0in;background:black'>});</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><img border=0 width=511 height=65 id="Picture 2"
src="Fullstack%20JS%20Project_files/image002.png"></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>OK, this is working, and we used static data.</p>

<p class=MsoNormal>Let’s add the code to retrieve this data from the MongoDB
database:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>We’ll need Mongoose for that, so let’s install it with the
save option for updating the dependencies section of the package.json file
(just as we did with express):</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid white 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:black;margin-left:.2in;margin-right:0in'>

<p class=JSCode style='margin-left:0in;background:black'>npm install mongoose –save</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The Mongoose will convert our javascript objects into
MongoDB documents and vice versa.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Let’s require Mongoose and connect it to our database:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid white 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:black;margin-left:.2in;margin-right:0in'>

<p class=JSCode style='margin-left:0in;background:black'>var mongoose =
require(&quot;mongoose&quot;);</p>

<p class=JSCode style='margin-left:0in;background:black'>mongoose.connect(&quot;mongodb://localhost:27017&quot;);</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>It would be cleaner if we separate our models from main.js,
so let’s create a new file named models.js.</p>

<p class=MsoNormal>In this file we’ll define all the models that we’ll be using
(student).</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Require it from main.js using the require function:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid white 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:black;margin-left:.2in;margin-right:0in'>

<p class=JSCode style='margin-left:0in;background:black'>var models =
require(&quot;./models&quot;);</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Open the models.js file, and add the two lines</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid white 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:black;margin-left:.2in;margin-right:0in'>

<p class=JSCode style='margin-left:0in;background:black'>var mongoose =
require(&quot;mongoose&quot;);</p>

<p class=JSCode style='margin-left:0in;background:black'>var Schema =
mongoose.Schema;</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=exercise><span class=MsoBookTitle><span style='font-variant:normal !important;
text-transform:uppercase'>Now it’s your turn:</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Create the schema for student named studentSchema.</p>

<p class=MsoNormal>The studentSchema should contain three properties:
firstName, lastName and avarageGrades</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal> </p>

<p class=exercise><span class=MsoBookTitle><span style='font-variant:normal !important;
text-transform:uppercase'>Answer:</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid white 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:black;margin-left:.2in;margin-right:0in'>

<p class=JSCode style='margin-left:0in;background:black'><span class=keyword>var
studentSchema = new Schema({</span></p>

<p class=JSCode style='margin-left:0in;background:black'><span class=keyword>       firstName:
{type: String},</span></p>

<p class=JSCode style='margin-left:0in;background:black'><span class=keyword>       lastName:
{type: String},</span></p>

<p class=JSCode style='margin-left:0in;background:black'><span class=keyword>       avarageGrades:
{type: Number}</span></p>

<p class=JSCode style='margin-left:0in;background:black'><span class=keyword>});</span></p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Next add the code to create a Student constructor and export
it from the models.js module so we can use in in our main.js file:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=exercise><span class=MsoBookTitle><span style='font-variant:normal !important;
text-transform:uppercase'>Answer:</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid white 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:black;margin-left:.2in;margin-right:0in'>

<p class=JSCode style='margin-left:0in;background:black'>var Student =
mongoose.model(&quot;Student&quot;, studentSchema);</p>

<p class=JSCode style='margin-left:0in;background:black'>module.exports.student
= Student;</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Back in main.js we can update the Students route to return
the list of students from the MongoDB database:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid white 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:black;margin-left:.2in;margin-right:0in'>

<p class=JSCode style='margin-left:0in;background:black'>app.get('/Students',
function (req, res) {</p>

<p class=JSCode style='margin-left:0in;background:black'>       models.Student.find(function
(error, students) {</p>

<p class=JSCode style='margin-left:0in;background:black'>                   res.send(students);</p>

<p class=JSCode style='margin-left:0in;background:black'>       });</p>

<p class=JSCode style='margin-left:0in;background:black'>});</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>How do we test that this code really works?</p>

<p class=MsoNormal>We’ve seen how to invoke this code from the browser, just
navigate to <a href="http://localhost:1337/Students">http://localhost:1337/Students</a>.
But we can’t see anything because we don’t have any students in the DB.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The simplest way to add a new student to the database is
through the mongo console window. Recall that we can add a new document using
db.&lt;name of the collection&gt;.save(&lt;document&gt;).</p>

<p class=MsoNormal>SO let’s try that out:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid white 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:black;margin-left:.2in;margin-right:0in'>

<p class=JSCode style='margin-left:0in;background:black'>db.students.save({firstName:
&quot;John&quot;, lastName: &quot;Smith&quot;, avarageGrades:88 });</p>

</div>

<p class=MsoNormal>And we can see the array of students:</p>

<p class=MsoNormal> </p>

<p class=MsoNormal><img border=0 width=576 height=59 id="Picture 3"
src="Fullstack%20JS%20Project_files/image003.jpg"></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Great, we’ve just managed to integrate express with node and
Mongoose with MongoDB!</p>

<p class=MsoNormal>&nbsp;</p>

<h1>Filtering the returned data</h1>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Usually we’re not interested in all the students in all
classes, but only in a subset.</p>

<p class=MsoNormal>So it would be nice if we could pass a filtering parameter
to the query string, for example:  <a
href="http://localhost:1337/Students?firstName=John">http://localhost:1337/Students?firstName=John</a></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>In the express lesson we saw that we can access all query
parameters </p>

<p class=MsoNormal>uisng the request.query object.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Let’s see what request.query looks like by temporary modifying
app.get('/Students'… to return req.query:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid white 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:black;margin-left:.2in;margin-right:0in'>

<p class=JSCode style='margin-left:0in;background:black'>res.send(req.query);</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Let’s open the browser, write a query string and see what we
get:</p>

<p class=MsoNormal><img border=0 width=540 height=65 id="Picture 4"
src="Fullstack%20JS%20Project_files/image004.png"></p>

<p class=MsoNormal>We see that express simply converts the query parameters
into a JSON file, making it very easy to access these parameters.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>If you recall from the Mongoose lesson, we can pass a query JSON
object as the first parameter to the find function.</p>

<p class=MsoNormal>But is it a smart idea to pass the request.query directly
into the find function (and pass it directly into the database)?</p>

<p class=MsoNormal>No its not. This because we do not have any control on the
query string that the user types.</p>

<p class=MsoNormal>We must sanitize the data.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>We can do it, for example, this way:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid white 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:black;margin-left:.2in;margin-right:0in'>

<p class=JSCode style='margin-left:0in;background:black'>var query = {};</p>

<p class=JSCode style='margin-left:0in;background:black'>if (req.query.firstName){</p>

<p class=JSCode style='margin-left:0in;background:black'>       query.firstName
= req.query.firstName;</p>

<p class=JSCode style='margin-left:0in;background:black'>}</p>

<p class=JSCode style='margin-left:0in;background:black'>       </p>

<p class=JSCode style='margin-left:0in;background:black'>if
(req.query.lastName)   {</p>

<p class=JSCode style='margin-left:0in;background:black'>       query.lastName
= req.query.lastName;</p>

<p class=JSCode style='margin-left:0in;background:black'>}</p>

<p class=JSCode style='margin-left:0in;background:black'>        </p>

<p class=JSCode style='margin-left:0in;background:black'>models.Student.find(query,
function (error, students) {</p>

<p class=JSCode style='margin-left:0in;background:black'>       res.send(students);</p>

<p class=JSCode style='margin-left:0in;background:black'>}); </p>

</div>

<p class=MsoNormal>Now let’s test that:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><img border=0 width=576 height=183 id="Picture 6"
src="Fullstack%20JS%20Project_files/image005.jpg"></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>And we see that the query does work! We know how to search
the database. And we also protected ourselves against random (or even malicious)
user input.</p>

<p class=MsoNormal>&nbsp;</p>

<h1>How about finding a student by his id?</h1>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>We know that each student document has a unique id, so why
don’t we use it to retrieve a specific user (we do not need an array of
students, we only want one student)?</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>In the Express lesson we learned that we can add a route for
student/id by using colon before the id:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid white 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:black;margin-left:.2in;margin-right:0in'>

<p class=JSCode style='margin-left:0in;background:black'>app.get('/Students/:id',
function (req, res) {</p>

</div>

<p class=MsoNormal><span style='font-size:9.5pt;line-height:107%;font-family:
Consolas;color:black'>&nbsp;</span></p>

<p class=MsoNormal>And then access this parameter using </p>

<div style='border:solid white 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:black;margin-left:.2in;margin-right:0in'>

<p class=JSCode style='margin-left:0in;background:black'><span
class=JSCodeChar>req.</span>params.id.</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>We’re going to use another version of find named findById
which does exactly what the name implies – we pass it an id and get back one
student (if exists). However the id doesn’t exists we would get an error.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Here’s is how our function looks:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid white 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:black;margin-left:.2in;margin-right:0in'>

<p class=JSCode style='margin-left:0in;background:black'>app.get('/Students/:id',
function (req, res) {</p>

<p class=JSCode style='margin-left:0in;background:black'>       models.Student.findById(req.params.id,
function (error, student) {</p>

<p class=JSCode style='margin-left:0in;background:black'>       if (error)</p>

<p class=JSCode style='margin-left:0in;background:black'>                   res.send(error);</p>

<p class=JSCode style='margin-left:0in;background:black'>       else </p>

<p class=JSCode style='margin-left:0in;background:black'>                   res.send(student);</p>

<p class=JSCode style='margin-left:0in;background:black'>       });</p>

<p class=JSCode style='margin-left:0in;background:black'>}); </p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>And we launch node and pass a valid id we get:</p>

<p class=MsoNormal><span style='font-size:9.5pt;line-height:107%;font-family:
Consolas;color:black'>&nbsp;</span></p>

<p class=MsoNormal><img border=0 width=576 height=80 id="Picture 7"
src="Fullstack%20JS%20Project_files/image006.jpg"></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>And for the invalid Id case:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><img border=0 width=539 height=118 id="Picture 8"
src="Fullstack%20JS%20Project_files/image007.png"></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>There we go! We managed to find a student by its id! Great!</p>

<p class=MsoNormal>&nbsp;</p>

<h1>Now we want to add a new student to the database</h1>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>We’ve seen how we can query the database for students, but
what if we want to add a new student? This is definatly a mandatory requirement!</p>

<p class=MsoNormal>We mentioned before that in a RESTfull services the POST
verb is used for adding new items.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>So this is exactly what we need to add – a POST route!</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Let’s add a meaningless post route just to make sure we
manage to invoke it:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid white 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:black;margin-left:.2in;margin-right:0in'>

<p class=JSCode style='margin-left:0in;background:black'>app.post('/Students',
function (req, res) {</p>

<p class=JSCode style='margin-left:0in;background:black'>       res.send(&quot;IN
POST!!!&quot;);</p>

<p class=JSCode style='margin-left:0in;background:black'>});</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>But how do we invoke it? The browser address bar always
issues GET requests. Never POSTs.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>We can do it with AJAX!</p>

<p class=MsoNormal>Let’s add a simple html page calls our server using AJAX post.
When we use AJAX we have the freedom to decide what verb the http request will
use.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>In your folder add the file ‘testpost.html’ and paste the
following code into it:</p>

<div style='border:solid white 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:black;margin-left:.2in;margin-right:0in'>

<p class=JSCode style='margin-left:0in;background:black'>&lt;!DOCTYPE html&gt;</p>

<p class=JSCode style='margin-left:0in;background:black'>&lt;html&gt;</p>

<p class=JSCode style='margin-left:0in;background:black'>&lt;head&gt;</p>

<p class=JSCode style='margin-left:0in;background:black'>&lt;script
src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.12.0/jquery.min.js&quot;&gt;&lt;/script&gt;</p>

<p class=JSCode style='margin-left:0in;background:black'>&lt;script&gt;</p>

<p class=JSCode style='margin-left:0in;background:black'>$(document).ready(function(){</p>

<p class=JSCode style='margin-left:0in;background:black'>       $(&quot;#postButton&quot;).click(function(){</p>

<p class=JSCode style='margin-left:0in;background:black'>                   $.post(&quot;http://localhost:1337/Students&quot;,
{}, function(result){</p>

<p class=JSCode style='margin-left:0in;background:black'>           
$(&quot;#response&quot;).html(result);</p>

<p class=JSCode style='margin-left:0in;background:black'>        });</p>

<p class=JSCode style='margin-left:0in;background:black'>       });</p>

<p class=JSCode style='margin-left:0in;background:black'>});</p>

<p class=JSCode style='margin-left:0in;background:black'>&lt;/script&gt;</p>

<p class=JSCode style='margin-left:0in;background:black'>&lt;/head&gt;</p>

<p class=JSCode style='margin-left:0in;background:black'>&lt;body&gt;</p>

<p class=JSCode style='margin-left:0in;background:black'>       &lt;button
id=&quot;postButton&quot; type=&quot;button&quot;&gt;Post!&lt;/button&gt;</p>

<p class=JSCode style='margin-left:0in;background:black'>       &lt;div
id=&quot;response&quot;&gt;&lt;/div&gt;</p>

<p class=JSCode style='margin-left:0in;background:black'>&lt;/body&gt;</p>

<p class=JSCode style='margin-left:0in;background:black'>&lt;/html&gt;</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This page issues a post AJAX request upon clicking the
value, and displays the response in the ‘response’ div.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>When we double click the file the default browser opens with
the address bar sets to <a
href="../../../tmp/NodeProjects/SummarizingProject/testpost.html">file:///C:/tmp/NodeProjects/SummarizingProject/testpost.html</a>.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>If we click the button we get the following error:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid white 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:black;margin-left:.2in;margin-right:0in'>

<p class=JSCode style='margin-left:0in;background:black'>XMLHttpRequest cannot
load http://localhost:1337/Students. No 'Access-Control-Allow-Origin' header is
present on the requested resource. Origin 'null' is therefore not allowed
access.</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This happens because the browser protects against cross
origin calls (CORS). The browser thinks that the html page came from a
different server than the server that the AJAX points to, and applies a
protection policy and just blocks the request.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To fix this problem we’ll change the server code to return “Access-Control-Allow”
headers, meaning that the server approves all clients no matter where they came
from. The easiest way is add these headers to every request using a global
middleware (a function that gets in the middle of the request-response pipeline
and can alter the response).</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid white 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:black;margin-left:.2in;margin-right:0in'>

<p class=JSCode style='margin-left:0in;background:black'>app.use(function(req,
res, next) {</p>

<p class=JSCode style='margin-left:0in;background:black'> 
res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</p>

<p class=JSCode style='margin-left:0in;background:black'> 
res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;Origin,
X-Requested-With, Content-Type, Accept&quot;);</p>

<p class=JSCode style='margin-left:0in;background:black'>  next();</p>

<p class=JSCode style='margin-left:0in;background:black'>});</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Don’t worry about this code since we’re not going to get into
it. Just do a copy-paste.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Now, when we double click the file and press the button we
can see the response from the post route:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><img border=0 width=563 height=82 id="Picture 9"
src="Fullstack%20JS%20Project_files/image008.png"></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Great! We now know how to POST to our server to create a new
student. </p>

<p class=MsoNormal>&nbsp;</p>

</div>

</body>

</html>
